컨테이너와 쿠버네티스, 현재 배포 기술의 진화의 최종점
옛날 배포 방식부터 쿠버네티스까지의 변화
컨테이너부터 쿠버네티스까지의 기술 변화


- 배포 시나리오
rdbms 1개, java 어플리케이션 3개, nodejs 1개, nosql 1개 등

- 서비스는 어떻게 올리는가?
원래 어플리케이션을 개발하고 배포하는 단계는 다음과 같았다.
1. 개발자의 컴퓨터에서 어플리케이션을 개발한다.
2. 이 개발에 사용한 환경을 배포용으로 바꿔서 서버 컴퓨터에 직접 또는 git으로 올린다.
3. 서버에서 실행시키고 확인한다.

이건 지금도 여전히 이루어지고 있는 배포의 방식입니다.
중간에 git을 활용하고 기타 자동화를 커스텀 방식으로 이용하고는 합니다.

- 서비스는 올리던 방식의 문제점? 은 아니고 불편한 점
자 이제 설치를 시작한다면 이렇게 합니다.
서버 한대에 rdbms를 설치합니다
java 8을 설치하고 거기에 java jar 파일을 배포하고 실행시킵니다.
nodejs 환경을 설치하고 프로그램을 띄웁니다
nosql을 설치합니다.
messagequeue를 설치합니다. 여기에도 java를 설치해야 합니다.

서버 컴퓨터의 사양에 따라서, 운영체제에 따라서....
그리고 뭐 필요한 환경이 있다면 그것들도 같이 설치를 해줘야 한다.
직접적으로 linux cli를 이용하여 해줘야할 것들이 많았다.

- 서버 컴퓨터에 직접 설치하던 시대에서 컨테이너로
docker와 같은 container 방식은 혁명적이다.
각자의 환경에서 큰 무리없이 어플리케이션을 띄울 수 있기 때문이다.
설정을 건드리지만 않으면 docker run 명령어 하나로 바로 띄워서 배포할 수 있습니다.
그리고 내 어플리케이션도 가능하고, 남이 만든 어플리케이션 프리셋도 설치할 수 있어요.

환경에 java8이 설치되어야 하고, 뭐가 되어야 하고....
그런건 docker 이미지를 미리 만드는 데에 약간의 추가만 거치면
바로 하나의 docker image(CD롬)으로 바로 설치를 할 수 있습니다.

- 이 컨테이너를 어떻게 처리할래?
이번엔 docker를 이용해서 어플리케이션을 설치합니다.
일단 각 서버에 docker를 설치해줍니다. 이게 linux cli를 만지는 초기 작업의 끝.
그리고 나면, 이제 각 서버에서 docker run을 해주면 됩니다.
docker run rdbms
docker run java image
docker run nodejs image
docker run nosql

이렇게 하면 끝입니다. 이것도 꽤나 간단합니다.


- 굳이 쿠버네티스 위에서 돌리면 뭐가 좋은데
쿠버네티스는 도대체 뭐길래 이렇게 핫하고 많은 기업들이 도입한다고 그러는 것일까요

굳이라고 말한 이유는 쿠버네티스는 기존 관리 환경보다 편리하기 때문입니다.
쿠버네티스는 굳이? 사용이 필요하다고 생각을 하지 않는다면 안 해도 오케이인 환경입니다.

쿠버네티스는 기존 docker container들을 모아서 관리하게 해주는 하나의 환경이자 플랫폼입니다.
지금까지 만들었던 컨테이너들이 쿠버네티스 안으로 쏙 다 들어가게 됩니다.

그러면 지금까지 만들었던 서버 컴퓨터들은 다 어떻게 되나요??
그건 쿠버네티스 환경 안에서 숨겨져 있고 이게 특징입니다.

쿠버네티스 환경에서 우리는 서버 컴퓨터들이 어떤지 알 필요가 없어요
(사실 알아야 제대로 쓸 수 있습니다.....만 말이 그렇다는 거에요)

지금까지 만들었던 서버 컴퓨터들은 쿠버네티스 환경 아래서는 지금까지와 구조가 달라집니다.

어플리케이션갯수만큼 서버 => 사용할 컨테이너들의 리소스 만큼의 서버 컴퓨터 갯수

우리는 master-worker 컴퓨터(노드)를 만들게 되고 
여기 안에서 우리 컨테이너들을 사용하게 됩니다.
물론 조절할 수 있지만 아무 설정없이 배포할 경우에는 여유가 있는 컴퓨터에 알아서
배치가 됩니다. 
사용자는 확인할 수 있지만, 이것을 아무것도 모른채로 사용해도 되는 것입니다.

쿠버네티스는 클러스터 환경이라고 불립니다.
클러스터라 함은 여러 컴퓨터가 하나의 컴퓨터처럼 보인다는 말입니다.

그리고 우리는 새로운 컨테이너를 docker run으로 했다면 kubectl을 이용해서
내 컴퓨터에서 명령만 내리면 됩니다.

이전에는 설치할 각 컴퓨터에 들어가서 docker run을 했다면
이제는 모든 컨테이너를 내 컴퓨터에서 한 방에 설치 요청을 보내면 됩니다.

그리고 여러 개의 같은 어플리케이션을 배포하는 것도 문제가 없습니다.

도대체 컨테이너 오케스트레이션이란 건 뭘 말하는 걸까요.
사실 전 이 단어로는 전혀 쿠버네티스에 대한 감이 오지 않았습니다.
컨테이너들을 관리하고 배포해준다. 자동화해준다. 오케이. 

보통 쿠버네티스의 특징을 설명할 때 자주나오는 설명이 이겁니다.
몇 개를 배포할지 숫자만 설정하면 그 갯수만큼 배포가 진행됩니다.
그리고 이 여러 개 중에 문제가 생기더라도 다시 만드는 것도 해주고,
업데이트를 할 때도 하나씩 업데이트 하면서 바꿔주는 것도 실행하는 갓갓 기능이죠.

배포가 편해요
각 docker container의 갯수 조절 가능
docker의 컴퓨터 리소스도 셋팅 가능
네트워크 설정도 내부적으로 잘 되어있음
상태 모니터링도 가능
로깅도 가능
플러그인도 빵빵하다.
이걸 gcp, aws 등에서 더 편리하고 안전하도록 지원해줌

여튼 쿠버네티스는 많은 컨테이너들을 사용할 때 
굉장히 효율적인 선택이 될 것으로 보입니다.

솔직히 10개만 넘어가도 저는 쓰고 싶을 것 같습니다.

점점 배포의 시대는 가상화의 시대로 넘어가고 있는 것 같습니다.

컴퓨터가 어떻든, OS가 어떻든, 
서버 컴퓨터가 여러 개든

하나처럼 그리고 편리하게 변화되고 있습니다.

물론 쿠버네티스가 그렇게 호락호락한 기술이 아니라는 점은 감안해야겟죠...


























